name: Keep Render Backend Alive

on:
  schedule:
    # Runs every 5 minutes to keep Render backend awake (more aggressive)
    - cron: '*/5 * * * *'
  workflow_dispatch: # Allows manual trigger

jobs:
  keep-alive:
    runs-on: ubuntu-latest
    
    steps:
    - name: Keep Backend Alive
      run: |
        echo "🔄 Pinging BABS10 backend to keep it alive..."
        
        # Ping the backend multiple times to ensure it stays awake
        for i in {1..3}; do
          echo "Ping attempt $i/3..."
          
          # Make a request to the backend
          response=$(curl -s -w "%{http_code}" -o /dev/null "https://babs10.onrender.com/api/")
          
          if [ "$response" = "200" ]; then
            echo "✅ Backend is alive and responding (HTTP $response)"
          else
            echo "⚠️ Backend responded with HTTP $response"
          fi
          
          # Wait 5 seconds between pings
          if [ $i -lt 3 ]; then
            sleep 5
          fi
        done
        
        echo "🌐 BABS10 backend keep-alive completed at $(date)"
        
        # Also try to access some data endpoints to keep them warm
        echo "🔥 Warming up data endpoints..."
        
        # Try to access users endpoint
        users_response=$(curl -s -w "%{http_code}" -o /dev/null "https://babs10.onrender.com/api/users/")
        echo "Users endpoint: HTTP $users_response"
        
        # Try to access health endpoint if it exists
        health_response=$(curl -s -w "%{http_code}" -o /dev/null "https://babs10.onrender.com/api/health")
        echo "Health endpoint: HTTP $health_response"
        
        echo "🎉 Keep-alive and endpoint warming completed!"
